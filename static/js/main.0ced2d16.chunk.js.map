{"version":3,"sources":["theme.js","components/Body.jsx","components/Button.jsx","components/ButtonContainer.jsx","components/Content.jsx","components/Subsubtitle.jsx","data/federal.js","components/DataList.jsx","components/Link.jsx","components/StateSelect.jsx","components/Paragraph.jsx","components/Subtitle.jsx","components/TextHighlight.jsx","components/Title.jsx","App.jsx","serviceWorker.js","index.js"],"names":["theme","colors","black","gray","lightGray","white","green","lightGreen","yellow","blue","darkBlue","Body","styled","div","_templateObject","BaseButton","button","Button_templateObject","props","selected","Button","_ref","onClick","children","react_default","a","createElement","ButtonContainer","ButtonContainer_templateObject","Content","Content_templateObject","Subsubtitle","h3","Subsubtitle_templateObject","federal","title","url","subtitle","getTitle","selectedButton","selectedRegion","arguments","length","undefined","concat","getData","Box","DataList_templateObject","BaseItem","_templateObject2","Item","href","target","rel","ItemTitle","ItemSubtitle","span","_templateObject3","_templateObject4","NoResults","_templateObject5","List","_ref2","_ref2$data","data","Fragment","components_Subsubtitle","map","d","DataList_Item","Object","assign","key","DataList","_ref3","_ref3$selectedRegion","DataList_List","Link","Link_templateObject","Composable","ComposableMap","StateSelect_templateObject","Tooltip","ReactTooltip","StateSelect_templateObject2","Container","StateSelect_templateObject3","mapCenter","StateSelect","callback","projectionConfig","scale","lib","center","disablePanning","geography","brasil","geographies","projection","id","style","default","fill","stroke","outline","hover","pressed","data-tip","properties","nome","data-for","border","Paragraph","p","Paragraph_templateObject","Subtitle","h2","Subtitle_templateObject","TextHighlight","TextHighlight_templateObject","Title","h1","Title_templateObject","App","_useState","useState","_useState2","slicedToArray","setSelectedButton","_useState3","_useState4","setSelectedRegion","handleClickButton","styled_components_browser_esm","components_Body","components_Content","components_Title","components_TextHighlight","components_Paragraph","components_Link","components_Subtitle","components_ButtonContainer","components_Button","components_DataList","components_StateSelect","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0ced2d16.chunk.js","sourcesContent":["export default {\n  colors: {\n    black: '#000000',\n    gray: 'rgba(0, 0, 0, 0.1)',\n    lightGray: 'rgba(0, 0, 0, 0.025)',\n    white: '#ffffff',\n    green: '#009b3a',\n    lightGreen: '#3de47c',\n    yellow: '#fedf00',\n    blue: '#336ef9',\n    darkBlue: '#002376',\n  },\n};\n","import styled from 'styled-components';\n\nconst Body = styled.div`\n  font-family: 'Montserrat', sans-serif;\n\n  display: flex;\n  justify-content: center;\n\n  margin: 0;\n  padding: 50px;\n\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n\n  @media screen and (max-width: 650px) {\n    padding: 5px;\n  }\n`;\n\nexport default Body;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst BaseButton = styled.button`\n  border: 2px solid ${props => (props.selected ? props.theme.colors.green : props.theme.colors.lightGray)};\n  border-radius: 5px;\n  outline: none;\n  padding: 15px;\n\n  min-width: 150px;\n\n  background: ${props => (props.selected ? props.theme.colors.green : props.theme.colors.gray)};\n  color: ${props => (props.selected ? props.theme.colors.yellow : props.theme.colors.black)};\n\n  font-family: 'Montserrat', sans-serif;\n  font-weight: ${props => (props.selected ? 'bold' : 'normal')};\n  font-size: 15px;\n  text-transform: uppercase;\n\n  transition-duration: 0.1s;\n\n  &:hover,\n  &:focus {\n    background: ${props => (props.selected ? props.theme.colors.lightGreen : 'none')};\n    border: 2px solid ${props => (props.selected ? props.theme.colors.green : props.theme.colors.gray)};\n    color: ${props => (props.selected ? props.theme.colors.blue : props.theme.colors.black)};\n  }\n\n  &:active {\n    font-weight: bold;\n    background-color: ${props => props.theme.colors.lightGreen};\n    box-shadow: 0 5px ${props => props.theme.colors.gray};\n    transform: translateY(4px);\n  }\n`;\n\nconst Button = ({ selected, onClick, children }) => (\n  <BaseButton selected={selected} onClick={onClick}>\n    {children}\n  </BaseButton>\n);\n\nexport default Button;\n","import styled from 'styled-components';\n\nconst ButtonContainer = styled.div`\n  display: flex;\n  justify-content: space-around;\n  padding: 5px;\n  margin: 0 0 50px 0;\n\n  @media screen and (max-width: 650px) {\n    flex-direction: column;\n\n    & > button {\n      margin: 0 0 25px 0;\n    }\n  }\n`;\n\nexport default ButtonContainer;\n","import styled from 'styled-components';\n\nconst Content = styled.div`\n  max-width: 1200px;\n`;\n\nexport default Content;\n","import styled from 'styled-components';\n\nconst Subsubtitle = styled.h3`\n  font-size: 25px;\n  text-transform: uppercase;\n  text-align: center;\n  font-weight: normal;\n  margin: 0;\n`;\n\nexport default Subsubtitle;\n","export default [\n  {\n    title: 'Portal Brasileiro de Dados Abertos',\n    url: 'http://dados.gov.br',\n  },\n  {\n    title: 'Portal da Transparência do Governo Federal',\n    url: 'http://www.portaltransparencia.gov.br/download-de-dados',\n  },\n  {\n    title: 'Portal de Dados Abertos',\n    subtitle: 'Ministério do Meio Ambiente',\n    url: 'http://dados.mma.gov.br/',\n  },\n];\n","import React from 'react';\nimport styled from 'styled-components';\nimport Subsubtitle from './Subsubtitle';\n\nimport federal from '../data/federal';\n\nconst getTitle = (selectedButton, selectedRegion = '') => {\n  if (selectedButton === 'federal') {\n    return 'Dados abertos federais';\n  }\n\n  // TODO: get state name with its ID\n  return `Dados abertos de ${selectedRegion}`;\n};\n\nconst getData = selectedButton => {\n  if (selectedButton === 'federal') {\n    return federal;\n  }\n\n  // TODO: getData for states\n  return [];\n};\n\nconst Box = styled.div`\n  max-width: 1000px;\n\n  background: ${props => props.theme.colors.white};\n  border: 1px solid ${props => props.theme.colors.gray};\n  border-radius: 15px;\n\n  margin: auto;\n  padding: 15px;\n`;\n\nconst BaseItem = styled.a`\n  display: flex;\n  flex-direction: column;\n\n  min-height: 50px;\n  border: 1px solid ${props => props.theme.colors.lightGray};\n  border-radius: 10px;\n  margin: 10px 5px;\n  padding: 10px;\n\n  text-decoration: none;\n\n  transition-duration: 0.4s;\n\n  background: ${props => props.theme.colors.lightGray};\n\n  &:hover,\n  &:active,\n  &:focus {\n    background: ${props => props.theme.colors.gray};\n  }\n`;\n\nconst Item = ({ title, subtitle, url }) => (\n  <BaseItem href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n    <ItemTitle>{title}</ItemTitle>\n    <ItemSubtitle>{subtitle}</ItemSubtitle>\n  </BaseItem>\n);\n\nconst ItemTitle = styled.span`\n  flex-grow: 1;\n\n  font-size: 18px;\n  font-weight: bold;\n  color: ${props => props.theme.colors.green};\n\n  transition-duration: 0.4s;\n\n  &:hover,\n  &:active,\n  &:focus {\n    color: ${props => props.theme.colors.blue};\n  }\n`;\n\nconst ItemSubtitle = styled.div`\n  font-style: italic;\n  font-size: 12px;\n  text-decoration: none;\n  color: ${props => props.theme.colors.black};\n`;\n\nconst NoResults = styled.div`\n  font-size: 20px;\n  text-align: center;\n  height: 100px;\n  line-height: 100px;\n`;\n\nconst List = ({ title, data = [] }) => (\n  <>\n    <Subsubtitle>{title}</Subsubtitle>\n    <Box>{data.length ? data.map(d => <Item key={d.url} {...d} />) : <NoResults>Nenhum resultado encontrado</NoResults>}</Box>\n  </>\n);\n\nconst DataList = ({ selectedButton, selectedRegion = '' }) => {\n  if (selectedButton === 'federal' || (selectedButton === 'estadual' && selectedRegion)) {\n    return <List title={getTitle(selectedButton, selectedRegion)} data={getData(selectedButton, selectedRegion)} />;\n  }\n\n  return null;\n};\n\nexport default DataList;\n","import styled from 'styled-components';\n\nconst Link = styled.a`\n  color: ${props => props.theme.colors.blue};\n  text-decoration: underline;\n\n  &:hover,\n  &:active,\n  &:focus {\n    color: ${props => props.theme.colors.darkBlue};\n    text-decoration-style: double;\n  }\n`;\n\nexport default Link;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { ComposableMap, ZoomableGroup, Geographies, Geography } from 'react-simple-maps';\nimport ReactTooltip from 'react-tooltip';\nimport theme from '../theme';\nimport Subsubtitle from './Subsubtitle';\n\nimport brasil from '../topo/states.json';\n\nconst Composable = styled(ComposableMap)`\n  width: 90vw;\n  height: 90vw;\n  max-width: 600px;\n  max-height: 600px;\n`;\n\nconst Tooltip = styled(ReactTooltip)`\n  color: ${props => props.theme.colors.black} !important;\n  font-weight: bold;\n  font-size: 15px;\n\n  background-color: ${props => props.theme.colors.white} !important;\n  box-shadow: 1px 11px 5px -4px ${props => props.theme.colors.gray};\n\n  &.place-top {\n    &:after {\n      border-top-color: ${props => props.theme.colors.white} !important;\n      border-top-style: solid !important;\n      border-top-width: 6px !important;\n    }\n  }\n`;\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  margin: 50px 0;\n`;\n\nconst mapCenter = [-54.77989334751745, -13.603361893828286];\n\nconst StateSelect = ({ callback, selectedButton, selectedRegion }) => {\n  if (selectedRegion || selectedButton !== 'estadual') {\n    return null;\n  }\n  return (\n    <Container>\n      <Subsubtitle>Selecione um estado</Subsubtitle>\n      <Composable\n        projectionConfig={{\n          scale: 1200,\n        }}\n      >\n        <ZoomableGroup center={mapCenter} disablePanning>\n          <Geographies geography={brasil}>\n            {(geographies, projection) =>\n              geographies.map(geography => (\n                <Geography\n                  key={geography.id}\n                  geography={geography}\n                  projection={projection}\n                  onClick={({ id }) => callback(id)}\n                  style={{\n                    default: {\n                      fill: theme.colors.lightGray,\n                      stroke: theme.colors.green,\n                      outline: 'none',\n                    },\n                    hover: {\n                      fill: theme.colors.gray,\n                      stroke: theme.colors.green,\n                      outline: 'none',\n                    },\n                    pressed: {\n                      fill: theme.colors.lightGreen,\n                      stroke: theme.colors.green,\n                      outline: 'none',\n                    },\n                  }}\n                  data-tip={`${geography.properties.nome} (${geography.id})`}\n                  data-for=\"map\"\n                />\n              ))\n            }\n          </Geographies>\n        </ZoomableGroup>\n      </Composable>\n      <Tooltip id=\"map\" border />\n    </Container>\n  );\n};\n\nexport default StateSelect;\n","import styled from 'styled-components';\n\nconst Paragraph = styled.p`\n  text-indent: 50px;\n  font-size: 18px;\n`;\n\nexport default Paragraph;\n","import styled from 'styled-components';\n\nconst Subtitle = styled.h2`\n  font-size: 35px;\n  text-transform: uppercase;\n  text-align: center;\n  font-weight: normal;\n  margin: 50px 0;\n`;\n\nexport default Subtitle;\n","import styled from 'styled-components';\n\nconst TextHighlight = styled.span`\n  background: ${props => props.theme.colors.green};\n  color: ${props => props.theme.colors.yellow};\n`;\n\nexport default TextHighlight;\n","import styled from 'styled-components';\n\nconst Title = styled.h1`\n  font-size: 45px;\n  text-transform: uppercase;\n  text-align: center;\n  font-weight: normal;\n  margin: 0 0 50px 0;\n`;\n\nexport default Title;\n","import React, { useState } from 'react';\nimport { ThemeProvider } from 'styled-components';\nimport theme from './theme';\nimport { Body, Content, Title, Subtitle, TextHighlight, Paragraph, Link, Button, ButtonContainer, DataList, StateSelect } from './components';\n\nconst App = () => {\n  const [selectedButton, setSelectedButton] = useState('');\n  const [selectedRegion, setSelectedRegion] = useState('');\n\n  const handleClickButton = selected => {\n    setSelectedButton(selected);\n    setSelectedRegion('');\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Body>\n        <Content>\n          <Title>\n            Mapa <TextHighlight>brasileiro</TextHighlight> de dados abertos\n          </Title>\n          <Paragraph>\n            Este é um site independente, com o simples objetivo de mapear as mais diversas fontes de dados abertos disponíveis no Brasil, seja a nível federal,\n            estadual ou municipal.\n          </Paragraph>\n          <Paragraph>\n            Qualquer pessoa pode propor alterações alterações à forma ou conteúdo desta página,{' '}\n            <Link href=\"https://github.com/renato-bohler/mapa-dados-abertos\" target=\"_blank\" rel=\"noopener noreferrer\">\n              através deste repositório\n            </Link>\n            , hospedado no GitHub.\n          </Paragraph>\n          <Subtitle>Selecione uma opção</Subtitle>\n          <ButtonContainer>\n            <Button onClick={() => handleClickButton('federal')} selected={selectedButton === 'federal'}>\n              Federal\n            </Button>\n            <Button onClick={() => handleClickButton('estadual')} selected={selectedButton === 'estadual'}>\n              Estadual\n            </Button>\n            <Button onClick={() => handleClickButton('municipal')} selected={selectedButton === 'municipal'}>\n              Municipal\n            </Button>\n          </ButtonContainer>\n          <DataList selectedButton={selectedButton} selectedRegion={selectedRegion} />\n          <StateSelect selectedButton={selectedButton} selectedRegion={selectedRegion} callback={setSelectedRegion} />\n        </Content>\n      </Body>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}